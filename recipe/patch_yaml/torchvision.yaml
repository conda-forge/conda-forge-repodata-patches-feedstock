# from this bit of code
# if record_name == "torchvision" and record["version"] == "0.11.2":
#     if 'pytorch * cpu*' in record['depends']:
#         i = record['depends'].index('pytorch * cpu*')
#         record['depends'][i] = 'pytorch 1.10.* cpu*'
#     elif 'pytorch * cuda*' in record['depends']:
#         i = record['depends'].index('pytorch * cuda*')
#         record['depends'][i] = 'pytorch 1.10.* cuda*'
if:
  name: "torchvision"
  version: "0.11.2"
  has_depends: "pytorch [*] cpu[*]"
then:
  - replace_depends:
      old: "pytorch [*] cpu[*]"
      new: "pytorch 1.10.* cpu*"
---
if:
  name: "torchvision"
  version: "0.11.2"
  has_depends: "pytorch [*] cuda[*]"
then:
  - replace_depends:
      old: "pytorch [*] cuda[*]"
      new: "pytorch 1.10.* cuda*"
---
# avoid that old torchvision (with unpinned pytorch) gets pulled in when
# we release a new pytorch version but haven't migrated torchvision yet;
# as seen above 0.11 was built against pytorch 1.10, so <2 is a very loose
# constraint, owing to how long things have been like this. See
# https://github.com/conda-forge/torchvision-feedstock/issues/71
if:
  name: "torchvision"
  version_lt: "0.11.0"
then:
  - tighten_depends:
      name: pytorch
      upper_bound: 2.0.0
---
# Nov 13, 2023 -- hmaarrfk
# It seems that torchvision wants to have the same cuda build as pytorch
if:
  name: "torchvision"
  build_number_in: [0, 1, 2]
  version_ge: 0.15.0
  version_lt: 0.16.0
  has_depends:
    - "cudatoolkit >=11.2,<12"
    - "pytorch >=2.0.0,<2.1.0a0"

then:
  - replace_depends:
      old: "pytorch >=2.0.0,<2.1.0a0"
      new: "pytorch 2.0.* cuda112*"
